#! /usr/bin/env python

PACKAGE='tuw_marker_slam'
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

data_association_enum = gen.enum([ gen.const("ID",          int_t, 0, "data association is based only on measurement IDs"),
                                   gen.const("NNSF_local",  int_t, 1, "ID + Nearest Neighbor Standard Filter (local optimum)"),
                                   gen.const("NNSF_global", int_t, 2, "ID + Nearest Neighbor Standard Filter (global optimum)")],
                                   "An enum selects an data association mode")

update_enum = gen.enum([ gen.const("None",     int_t, 0, "no updating"),
                         gen.const("Single",   int_t, 1, "measurements are processed single when updating"),
                         gen.const("Combined", int_t, 2, "measurements are processed combined when updating")],
                                   "An enum selects an update mode")

gen.add("enable_prediction", bool_t,   0, "enables state prediction step",  True)
gen.add("alpha_1", double_t, 0, "control noise alpha 1", 0.1, 0, 10)
gen.add("alpha_2", double_t, 0, "control noise alpha 2", 0.1, 0, 6.28)
gen.add("alpha_3", double_t, 0, "control noise alpha 3", 0.1, 0, 10)
gen.add("alpha_4", double_t, 0, "control noise alpha 4", 0.1, 0, 6.28)

gen.add("data_association_mode", int_t, 0, "Select mode of data association", 0, 0, 2, edit_method=data_association_enum)
gen.add("alpha", double_t, 0, "100*(1-alpha)% of true measurements are rejected", 0.95, 0, 1)

gen.add("update_mode", int_t, 0, "Select mode of updating", 1, 0, 2, edit_method=update_enum)

gen.add("enable_integration", bool_t,   0, "enables integration step",  True)

exit(gen.generate(PACKAGE, "tuw_marker_slam", "EKFSLAM"))
